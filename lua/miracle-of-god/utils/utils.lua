local M = {}
local colors = require("miracle-of-god.utils.color").COLORS

local function HL(syntaxName, options)
	vim.api.nvim_set_hl(0, syntaxName, options)
end

function M.setHighLight()
	-- basic
	HL("Normal", { fg = colors.PURPLE })
	HL("Comment", { fg = colors.GRAY, italic = true })
	HL("Cursor", { fg = colors.ORANGE })
	HL("CursorLine", { bg = "" })
	HL("CursorColumn", { bg = "" })
	HL("LineNr", { fg = colors.GRAY })
	HL("CursorLineNr", { fg = colors.RED })
	HL("String", { fg = colors.RED })
	HL("Number", { fg = colors.BROWN })
	HL("Boolean", { fg = colors.GREEN })
	HL("Function", { fg = colors.BLUE })
	HL("Keyword", { fg = colors.PINK })
	HL("Operator", { fg = colors.ORANGE })
	HL("Type", { fg = colors.GREEN })
	HL("Identifier", { fg = colors.PURPLE })
	HL("PreProc", { fg = colors.PINK })
	HL("Special", { fg = colors.GREEN })
	HL("Underlined", { fg = colors.GREEN, underline = true })
	HL("Constant", { fg = colors.YELLOW })
	HL("Label", { fg = colors.GREEN })
	HL("SpecialKey", { fg = colors.BROWN })
	HL("Title", { fg = colors.PURPLE })
	HL("Tag", { fg = colors.BROWN })
	HL("@variable", { fg = colors.PURPLE, italic = true })
	HL("Search", { fg = colors.BG, bg = colors.YELLOW })
	HL("IncSearch", { fg = colors.BG, bg = colors.YELLOW })
	HL("DiagnosticError", { fg = colors.RED })
	HL("DiagnosticWarn", { fg = colors.YELLOW })
	HL("DiagnosticInfo", { fg = colors.BLUE })
	HL("DiagnosticHint", { fg = colors.ORANGE })
	HL("Directory", { fg = colors.BLUE })
	HL("NotifyERRORBorder", { fg = colors.RED })
	HL("NotifyERRORTitle", { fg = colors.RED })
	HL("NotifyERRORBody", { fg = colors.RED })
	HL("NotifyERRORIcon", { fg = colors.RED })
	HL("NotifyWARNBorder", { fg = colors.YELLOW })
	HL("NotifyWARNTitle", { fg = colors.YELLOW })
	HL("NotifyWARNBody", { fg = colors.YELLOW })
	HL("NotifyWARNIcon", { fg = colors.YELLOW })
	HL("NotifyINFOBorder", { fg = colors.BLUE })
	HL("NotifyINFOTitle", { fg = colors.BLUE })
	HL("NotifyINFOBody", { fg = colors.BLUE })
	HL("NotifyINFOIcon", { fg = colors.BLUE })
	HL("@markup.heading", { fg = colors.RED, bold = true })
	HL("@markup.heading.1.markdown", { fg = colors.RED, bold = true })
	HL("@markup.heading.2.markdown", { fg = colors.ORANGE, bold = true })
	HL("@markup.heading.3.markdown", { fg = colors.YELLOW, bold = true })
	HL("@markup.heading.4.markdown", { fg = colors.GREEN, bold = true })
	HL("@markup.heading.5.markdown", { fg = colors.BLUE, bold = true })
	HL("@markup.heading.6.markdown", { fg = colors.PURPLE, bold = true })
	HL("@markup.row", { fg = colors.RED, bold = true })
	HL("@markup.strong", { fg = colors.RED, bold = true })
	HL("@markup.italic", { fg = colors.YELLOW, italic = true })
	HL("@markup.link", { fg = colors.PURPLE })
	HL("@markup.list.unchecked", { fg = colors.RED })
	HL("@markup.list.checked", { fg = colors.ORANGE })
	HL("@markup.quote", { fg = colors.BLUE })
	HL("@markup.raw.delimiter.markdown", { fg = colors.BROWN })
	HL("markup.link.label.markdown", { fg = colors.RED })
	HL("@punctuation.special.markdown", { fg = colors.BLUE })
	HL("DiffAdd", { fg = colors.GREEN })
	HL("DiffChange", { fg = colors.BROWN })
	HL("DiffDelete", { fg = colors.RED })
	HL("NvimTreeImageFile", { fg = colors.ORANGE })
	HL("NvimTreeExecFile", { fg = colors.RED })
	HL("HopNextKey", { fg = colors.RED })
	HL("HopNextKey1", { fg = colors.BLUE })
	HL("HopNextKey2", { fg = colors.PURPLE })
end

return M
